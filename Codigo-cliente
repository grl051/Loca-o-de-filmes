Codigo do cliente!

package realcrud;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;

public class ClIenteda {

	    private static final String URL = "jdbc:mysql://localhost:3306/crud?user_root&password=";
	    private static final String USUARIO = "root";
	    private static final String SENHA = "Gabriel051004@";
		private static Scanner scanner;

		ConexaoDAO dao = new ConexaoDAO();
		Connection conexao = ConexaoDAO.conectaDB();
		
		public static void main(String[] args) {
			Scanner scanner = new Scanner(System.in);
	        String opcao;
	        do {
	            System.out.println("===== MENU =====");
	            System.out.println("1. Exibir Clientes");
	            System.out.println("2. Adicionar Cliente");
	            System.out.println("3. Editar Cliente");
	            System.out.println("4. Excluir Cliente");
	            System.out.println("0. Sair");
	            System.out.print("Escolha uma opção: ");
	            opcao = scanner.nextLine();

	            switch (opcao) {
	                case "1":
	                    exibirClientes();
	                    break;
	                case "2":
	                    adicionarCliente();
	                    break;
	                case "3":
	                    editarCliente();
	                    break;
	                case "4":
	                    excluirCliente();
	                    break;
	                case "0":
	                    System.out.println("Encerrando o programa...");
	                    break;
	                default:
	                    System.out.println("Opção inválida!");
	                    break;
	                     }
	        
	        } while (!opcao.equals("0"));

		
	        }
	            
	        
		private static void exibirClientes() {
	        try (Connection connection = DriverManager.getConnection(URL, USUARIO, SENHA);
	             Statement statement = connection.createStatement();
	             ResultSet resultSet = statement.executeQuery("SELECT * FROM cliente")) {

	            System.out.println("===== CLIENTES =====");
	            while (resultSet.next()) {
	                String cpf = resultSet.getString(String.valueOf("CPF"));
	                String login = resultSet.getString("Login");
	                String fdp = resultSet.getString("forma_de_pagamento");

	                System.out.println("CPF: " + String.valueOf(cpf));
	                System.out.println("Login: " + login);
	                System.out.println("Forma de pagamento: " + fdp);
	                System.out.println("------------------------------");
	            }
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	    }
		
		private static void adicionarCliente() {
		        try (Connection connection = DriverManager.getConnection(URL, USUARIO, SENHA);
		             PreparedStatement preparedStatement = connection.prepareStatement(
		                     "INSERT INTO cliente (CPF,Login,forma_de_pagamento) VALUES (?, ?, ?)")) {

		            scanner = new Scanner(System.in);

		            System.out.print("Digite o seu CPF = ");
		            String cpf = scanner.next();

		            System.out.print("Digite o seu Login(EX.Gabriel@54): ");
		            String login = scanner.next();
           
		            String fdp;
System.out.println("--------Opções de Pagamento");
			            System.out.println("1. Cartâo de Credito");
			            System.out.println("2. Cartâo de Debito");
			            System.out.println("3. Boleto");
			            System.out.println("4. PIX");
			            System.out.println("0. Sair");
			            System.out.print("Escolha uma opção: ");
			            fdp = scanner.next();

			            switch (fdp) {
			                case "1":
			                    System.out.println(" "
			                    		+ "Cartâo de Credito!!");;
			                    break;
			                case "2":
			                    System.out.println(" "
			                    		+ "Cartâo de Debito!!");
			                    break;
			                case "3":
			                    System.out.println(" "
			                    		+ "Boleto!!");
			                    break;
			                case "4":
			                   System.out.println("  PIX!");
			                    break;
			                case "0":
			                    System.out.println("Encerrando o programa...");
			                    break;
			                default:
			                    System.out.println("Opção inválida!");
			                    break;
			                     }
			            preparedStatement.setString(1, String.valueOf(cpf));        
			            preparedStatement.setString(2, login);
			            preparedStatement.setString(3, fdp);
				            
		            int linhasAfetadas = preparedStatement.executeUpdate();
		            if (linhasAfetadas > 0) {
		                System.out.println("--------------Cliente atualizado com sucesso!");
		            } else {
		                System.out.println("Falha ao atualizar Cliente. Verifique CPF informado.");
		                
		            }
 }

		        catch (SQLException e) {
		            e.printStackTrace();
		        }
		}
		 private static void editarCliente() {
		        try (Connection connection = DriverManager.getConnection(URL, USUARIO, SENHA);
		             PreparedStatement preparedStatement = connection.prepareStatement(
		                     "UPDATE cliente SET Login = ? WHERE CPF = ? ")) {

		            Scanner scanner = new Scanner(System.in);

		            System.out.print("Digite o CPF do cliente que deseja editar: ");
		            String CPF = scanner.next();    

		            System.out.print("Digite o novo login do cliente: ");
		            String login = scanner.next();

		            preparedStatement.setString(2, String.valueOf(CPF));
		            
		            preparedStatement.setString(1, login);
		            
		        
		            int linhasAfetadas = preparedStatement.executeUpdate();
		            if (linhasAfetadas > 0) {
		                System.out.println("Cliente atualizado com sucesso!");
		            } else {
		                System.out.println("Falha ao atualizar Cliente. Verifique CPF informado.");
		                
		            }

		        } catch (SQLException e) {
		            e.printStackTrace();
		        }
		    }
		 private static void excluirCliente() {
		        try (Connection connection = DriverManager.getConnection(URL, USUARIO, SENHA);
		             PreparedStatement preparedStatement = connection.prepareStatement(
		                     "DELETE FROM cliente WHERE CPF = ?")) {

		            Scanner scanner = new Scanner(System.in);

		            System.out.print("Digite o CPF do cliente que deseja excluir: ");
		            String CPF = scanner.next();

		            preparedStatement.setString(1, String.valueOf(CPF));

		            int linhasAfetadas = preparedStatement.executeUpdate();
		            if (linhasAfetadas > 0) {
		                System.out.println("Cliente excluído com sucesso!");
		            } else {
		                System.out.println("Falha ao excluir cliente. Verifique o CPF informado.");
		            }

		        } catch (SQLException e) {
		            e.printStackTrace();
		        }
		        
		        	        
		    }

}
